/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ProyectoEstructuras2;

import ProyectoEstructuras2.AVLTree;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.FlowLayout;
import ProyectoEstructuras2.Tarjeta;
import ProyectoEstructuras2.ConjuntoDisyunto;
import ProyectoEstructuras2.Lista;
import ProyectoEstructuras2.maxHeap2C;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Scanner;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
/**
 *
 * @author 57312
 */
public class MENU1 extends javax.swing.JFrame {
    Lista<Tarjeta> lista = cargarTarjetas();
    private static final String ARCHIVO_TARJETAS = "tarjetas.txt";
    Scanner scanner = new Scanner(System.in);
    Lista<Tarjeta> guardadas = new Lista<>();
    ConjuntoDisyunto<Tarjeta> conjuntoDisyunto = cargarTarjetasConjuntoDisyunto();
    AVLTree avl = cargarTarjetasAvl();
    maxHeap2C heap = cargarTarjetasHeap();


    /**
     * Creates new form MENU1
     */
    public MENU1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        OPCION1 = new javax.swing.JButton();
        OPCION2 = new javax.swing.JButton();
        OPCION3 = new javax.swing.JButton();
        OPCION4 = new javax.swing.JButton();
        MENU = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 153, 153));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("MENU");
        jTextField1.setBorder(null);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        OPCION1.setText("CONSEJOS ");
        OPCION1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OPCION1MousePressed(evt);
            }
        });
        OPCION1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPCION1ActionPerformed(evt);
            }
        });

        OPCION2.setText("BUSCAR ");
        OPCION2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OPCION2MousePressed(evt);
            }
        });
        OPCION2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPCION2ActionPerformed(evt);
            }
        });

        OPCION3.setText("CONSEJOS GUARDADOS\n");
        OPCION3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OPCION3MousePressed(evt);
            }
        });
        OPCION3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPCION3ActionPerformed(evt);
            }
        });

        OPCION4.setText("CREAR CONSEJO");
        OPCION4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OPCION4MousePressed(evt);
            }
        });
        OPCION4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPCION4ActionPerformed(evt);
            }
        });

        MENU.setEditable(false);
        MENU.setBackground(new java.awt.Color(0, 153, 153));
        MENU.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        MENU.setForeground(new java.awt.Color(255, 255, 253));
        MENU.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MENU.setText("MENU");
        MENU.setBorder(null);
        MENU.setPreferredSize(new java.awt.Dimension(64, 30));
        MENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MENU, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OPCION1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OPCION2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OPCION3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OPCION4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(MENU, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(OPCION1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OPCION2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OPCION3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OPCION4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(406, Short.MAX_VALUE))
        );

        OPCION2.getAccessibleContext().setAccessibleName("OPCION2");
        OPCION2.getAccessibleContext().setAccessibleParent(OPCION2);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 820));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 940, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 940, 820));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OPCION1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OPCION1MousePressed
        mostrarTodas();            
//FormularioTarjeta formulario = new FormularioTarjeta();
            //formulario.setVisible(true);
    }//GEN-LAST:event_OPCION1MousePressed

    private void OPCION2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OPCION2MousePressed
        mostrarTarjetas();
    }//GEN-LAST:event_OPCION2MousePressed

    private void OPCION2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPCION2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OPCION2ActionPerformed

    private void OPCION3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OPCION3MousePressed
        mostrarGuardadas();
    }//GEN-LAST:event_OPCION3MousePressed

    private void OPCION3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPCION3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OPCION3ActionPerformed

    private void OPCION4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OPCION4MousePressed
        crearTarjeta();
    }//GEN-LAST:event_OPCION4MousePressed

    private void OPCION4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPCION4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OPCION4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void OPCION1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPCION1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OPCION1ActionPerformed

    private void MENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MENUActionPerformed
    
    private void crearTarjeta() {
jPanel3.removeAll(); // Limpiar el panel
jPanel3.setLayout(new BoxLayout(jPanel3, BoxLayout.Y_AXIS)); 

// Configurar el color de fondo del panel 
jPanel3.setBackground(new java.awt.Color(0, 153, 153));

// Crear campos y etiquetas
JLabel lblTitulo = new JLabel("TITULO");
lblTitulo.setHorizontalAlignment(SwingConstants.CENTER); // Color para el título
lblTitulo.setForeground(java.awt.Color.WHITE); // Texto 
lblTitulo.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

JTextField txtTitulo = new JTextField();
txtTitulo.setPreferredSize(new java.awt.Dimension(500, 125)); // Campo de texto 
txtTitulo.setMaximumSize(new java.awt.Dimension(500, 125)); // tamaño máximo
txtTitulo.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

// Campo de Consejo
JLabel lblConsejo = new JLabel("CONSEJO");
lblConsejo.setHorizontalAlignment(SwingConstants.CENTER); // Centrar el texto del consejo
lblConsejo.setForeground(java.awt.Color.WHITE); // Texto en blanco
lblConsejo.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

JTextArea txtConsejo = new JTextArea(20, 20); // Área de texto 
JScrollPane scrollPane = new JScrollPane(txtConsejo); // Para que el área de texto tenga barra de desplazamiento
scrollPane.setPreferredSize(new java.awt.Dimension(500, 125)); // Ajustar tamaño del área de texto
scrollPane.setMaximumSize(new java.awt.Dimension(500, 125)); // tamaño máximo
scrollPane.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

// Campo de Etiqueta
JLabel lblEtiqueta = new JLabel("ETIQUETA");
lblEtiqueta.setHorizontalAlignment(SwingConstants.CENTER);// Color para el campo "Etiqueta"
lblEtiqueta.setForeground(java.awt.Color.WHITE); // Texto en blanco
lblEtiqueta.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar

JTextField txtEtiqueta = new JTextField();
txtEtiqueta.setPreferredSize(new java.awt.Dimension(500, 125)); // Campo de texto 
txtEtiqueta.setMaximumSize(new java.awt.Dimension(500, 125));
txtEtiqueta.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

// Botón para guardar la tarjeta
JButton btnGuardar = new JButton("Guardar");
btnGuardar.setBackground(new java.awt.Color(0, 153, 153)); // Cambiar color de fondo
btnGuardar.setForeground(java.awt.Color.WHITE); // Cambiar color del texto del botón
btnGuardar.setFocusPainted(false); // Evitar el borde 
btnGuardar.setAlignmentX(Component.CENTER_ALIGNMENT); // Centrar 

// Acción del botón guardar
btnGuardar.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        String titulo = txtTitulo.getText();
        String contenido = txtConsejo.getText();
        String etiqueta = txtEtiqueta.getText();
        float rating = 0; 

        Tarjeta nuevaTarjeta = new Tarjeta(contenido, titulo, etiqueta, rating);
        lista.add(nuevaTarjeta);
        avl.insert(nuevaTarjeta);
        heap.insert(nuevaTarjeta);

        // Guardar tarjetas en el archivo
        guardarTarjetasEnArchivo();

        
        txtConsejo.setText("");
        txtTitulo.setText("");
        txtEtiqueta.setText("");

        javax.swing.JOptionPane.showMessageDialog(null, "Tarjeta guardada");
    }
});


// Añadir componentes al panel 
jPanel3.add(lblTitulo);
jPanel3.add(txtTitulo);
jPanel3.add(javax.swing.Box.createVerticalStrut(10)); // Espacio extra entre los campos

jPanel3.add(lblConsejo);
jPanel3.add(scrollPane);
jPanel3.add(javax.swing.Box.createVerticalStrut(10));

jPanel3.add(lblEtiqueta);
jPanel3.add(txtEtiqueta);
jPanel3.add(javax.swing.Box.createVerticalStrut(10)); // Espacio extra entre los campos

 // Espacio extra entre los campos

jPanel3.add(btnGuardar);
jPanel3.add(javax.swing.Box.createVerticalStrut(10)); // Espacio extra al final

// Refrescar el panel para mostrar los nuevos componentes
jPanel3.revalidate();
jPanel3.repaint();

}
    
    private void guardarTarjetasEnArchivo() {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARCHIVO_TARJETAS))) {
        for (Tarjeta tarjeta : lista) {
            writer.write( tarjeta.getData() + "," + tarjeta.getTitle() + "," + tarjeta.getTag() + "," + tarjeta.getRating());
            writer.newLine(); // Añadir nueva línea después de cada tarjeta
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

        private static Lista<Tarjeta> cargarTarjetas() {
        Lista<Tarjeta> lista = new Lista<>();
        try (BufferedReader br = new BufferedReader(new FileReader(ARCHIVO_TARJETAS))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String data = parts[0];
                String title = parts[1];
                String tag = parts[2];
                float rating = Float.parseFloat(parts[3]);
                Tarjeta tarjeta = new Tarjeta(data, title, tag, rating);
                tarjeta.ratings.add(rating);
                lista.add(tarjeta);
            }
        } catch (IOException e) {
            System.out.println("Error al cargar las tarjetas: " + e.getMessage());
        }
        return lista;
    }
        
        private static maxHeap2C cargarTarjetasHeap() {
        maxHeap2C heap = new maxHeap2C();
        try (BufferedReader br = new BufferedReader(new FileReader(ARCHIVO_TARJETAS))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String title = parts[1];
                String data = parts[0];
                String tag = parts[2];
                float rating = Float.parseFloat(parts[3]);
                Tarjeta tarjeta = new Tarjeta(data, title, tag, rating);
                tarjeta.ratings.add(rating);
                heap.insert(tarjeta);
            }
        } catch (IOException e) {
            System.out.println("Error al cargar las tarjetas al heap: " + e.getMessage());
        }
        return heap;
    } 
    private static AVLTree cargarTarjetasAvl() {
        AVLTree avl = new AVLTree();
        try (BufferedReader br = new BufferedReader(new FileReader(ARCHIVO_TARJETAS))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String title = parts[1];
                String data = parts[0];
                String tag = parts[2];
                float rating = Float.parseFloat(parts[3]);
                Tarjeta tarjeta = new Tarjeta(data, title, tag, rating);
                tarjeta.ratings.add(rating);
                avl.insert(tarjeta);
            }
        } catch (IOException e) {
            System.out.println("Error al cargar las tarjetas al AVL: " + e.getMessage());
        }
        return avl;
    }


    private static ConjuntoDisyunto<Tarjeta> cargarTarjetasConjuntoDisyunto(){
        ConjuntoDisyunto<Tarjeta> conjuntoDisyunto = new ConjuntoDisyunto<>();
        try (BufferedReader br = new BufferedReader(new FileReader(ARCHIVO_TARJETAS))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String title = parts[1];
                String data = parts[0];
                String tag = parts[2];
                float rating = Float.parseFloat(parts[3]);
                Tarjeta tarjeta = new Tarjeta(data, title, tag, rating);
                tarjeta.ratings.add(rating);
                conjuntoDisyunto.makeSet(tarjeta);
            }
        } catch (IOException e) {
            System.out.println("Error al cargar las tarjetas al conjunto disyunto: " + e.getMessage());
        }
        return conjuntoDisyunto;
    }

 

            
// Método para mostrar las tarjetas al iniciar 
private void mostrarTarjetas() {
    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel de búsqueda
    JPanel panelBusqueda = new JPanel();
    panelBusqueda.setLayout(new BoxLayout(panelBusqueda, BoxLayout.Y_AXIS));
    panelBusqueda.setBackground(new java.awt.Color(0, 153, 153));

    JTextField txtBusqueda = new JTextField();
    txtBusqueda.setPreferredSize(new java.awt.Dimension(500, 30));
    txtBusqueda.setMaximumSize(new java.awt.Dimension(500, 30));
    txtBusqueda.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(txtBusqueda);

    JButton btnBuscar = new JButton("Buscar");
    btnBuscar.setBackground(new java.awt.Color(0, 153, 153));
    btnBuscar.setForeground(java.awt.Color.WHITE);
    btnBuscar.setFocusPainted(false);
    btnBuscar.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnBuscar);

    JButton btnMostrarRecientes = new JButton("Mostrar más recientes");
    btnMostrarRecientes.setBackground(new java.awt.Color(0, 153, 153));
    btnMostrarRecientes.setForeground(java.awt.Color.WHITE);
    btnMostrarRecientes.setFocusPainted(false);
    btnMostrarRecientes.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnMostrarRecientes);

    JButton btnMejorCalificadas = new JButton("Mostrar mejor calificadas");
    btnMejorCalificadas.setBackground(new java.awt.Color(0, 153, 153));
    btnMejorCalificadas.setForeground(java.awt.Color.WHITE);
    btnMejorCalificadas.setFocusPainted(false);
    btnMejorCalificadas.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnMejorCalificadas);

    // Añadir el panel de búsqueda al panel principal
    jPanel3.add(panelBusqueda, BorderLayout.NORTH);


    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    // Cargar todas las tarjetas sin filtro al iniciar

    // Acción del botón buscar para filtrar tarjetas llamando a 'buscarTarjetas'
    btnBuscar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas(txtBusqueda.getText().toLowerCase().trim());
        }
    });

    // Acción del botón mostrar más recientes
    btnMostrarRecientes.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas("/recent");
        }
    });

    btnMejorCalificadas.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas("/rating");;
        }
    });

    jPanel3.revalidate();
    jPanel3.repaint();
}

// Método para cargar todas las tarjetas

public void mostrar(){

    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas  
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    cargarTarjetasAsync("", panelTarjetas);
    
}

// Método para mostrar las tarjetas guardadas
private void mostrarGuardadas() {
    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    // Cargar las tarjetas mejor calificadas
    cargarGuardadas(panelTarjetas);

    jPanel3.revalidate();
    jPanel3.repaint();
}


// Método para mostrar las tarjetas mejor calificadas
private void mostrarMejorCalificadas() {
    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    // Cargar las tarjetas mejor calificadas
    cargarMejorCalificadas(panelTarjetas);

    jPanel3.revalidate();
    jPanel3.repaint();
}


// Método para buscar y filtrar las tarjetas usando la palabra clave
private void buscarTarjetas(String keyword) {
    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel de búsqueda (para mantenerlo visible después de la búsqueda)
    JPanel panelBusqueda = new JPanel();
    panelBusqueda.setLayout(new BoxLayout(panelBusqueda, BoxLayout.Y_AXIS));
    panelBusqueda.setBackground(new java.awt.Color(0, 153, 153));

    JTextField txtBusqueda = new JTextField(keyword);
    txtBusqueda.setPreferredSize(new java.awt.Dimension(500, 30));
    txtBusqueda.setMaximumSize(new java.awt.Dimension(500, 30));
    txtBusqueda.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(txtBusqueda);

    JButton btnBuscar = new JButton("Buscar");
    btnBuscar.setBackground(new java.awt.Color(0, 153, 153));
    btnBuscar.setForeground(java.awt.Color.WHITE);
    btnBuscar.setFocusPainted(false);
    btnBuscar.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnBuscar);

    JButton btnMostrarRecientes = new JButton("Mostrar más recientes");
    btnMostrarRecientes.setBackground(new java.awt.Color(0, 153, 153));
    btnMostrarRecientes.setForeground(java.awt.Color.WHITE);
    btnMostrarRecientes.setFocusPainted(false);
    btnMostrarRecientes.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnMostrarRecientes);

    JButton btnMejorCalificadas = new JButton("Mostrar mejor calificadas");
    btnMejorCalificadas.setBackground(new java.awt.Color(0, 153, 153));
    btnMejorCalificadas.setForeground(java.awt.Color.WHITE);
    btnMejorCalificadas.setFocusPainted(false);
    btnMejorCalificadas.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelBusqueda.add(btnMejorCalificadas);

    // Añadir el panel de búsqueda al panel principal
    jPanel3.add(panelBusqueda, BorderLayout.NORTH);

    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    // Cargar las tarjetas filtradas por palabra clave
    cargarTarjetasAsync(keyword, panelTarjetas);

    // Volver a asignar el evento al botón de búsqueda
    btnBuscar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas(txtBusqueda.getText().toLowerCase().trim());
        }
    });

    btnMostrarRecientes.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas("/recent");;
        }
    });

    btnMejorCalificadas.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas("/rating");
        }
    });

    jPanel3.revalidate();
    jPanel3.repaint();
}

// Método que carga las tarjetas, filtrando por palabra clave si se proporciona
private void cargarTarjetasAsync(String keyword, JPanel panelTarjetas) {
    if (keyword == "/recent"){
        cargarRecientes(panelTarjetas);
    }
    else if (keyword == "/rating"){
        cargarMejorCalificadas(panelTarjetas);
    }
    else {
        SwingWorker<Void, JButton> worker = new SwingWorker<Void, JButton>() {
            @Override
                protected Void doInBackground() throws Exception {
                    panelTarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

                    boolean found = false;

                    for (Tarjeta actualTarjeta : lista) { 
                        // Filtrar por la palabra clave si existe
                        if (actualTarjeta.getTitle().toLowerCase().contains(keyword) || 
                            actualTarjeta.getData().toLowerCase().contains(keyword) || 
                            actualTarjeta.getTag().toLowerCase().contains(keyword)) {

                            // Crear el botón para cada tarjeta
                            JButton btnTarjeta = new JButton("<html>" + actualTarjeta.getTitle() + 
                                                            "<br>Rating: " + actualTarjeta.getRating() + " estrellas</html>");
                            btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
                            btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
                            btnTarjeta.setForeground(java.awt.Color.WHITE);

                            // Acción para mostrar la tarjeta completa al presionarla
                            btnTarjeta.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    mostrarTarjetaCompleta(actualTarjeta);
                                }
                            });

                            // Publicar la tarjeta para agregarla a la interfaz
                            publish(btnTarjeta);
                            found = true;
                        }
                    }

                    // Si no se encontraron resultados, mostrar un mensaje
                    if (!found) {
                        javax.swing.JOptionPane.showMessageDialog(null, "no se encontro tarjeta que coincida con el criterio");
                                    }

                    return null;
                }

            @Override
            protected void process(java.util.List<JButton> chunks) {
                for (JButton btnTarjeta : chunks) {
                    panelTarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
                }
                panelTarjetas.revalidate();
                panelTarjetas.repaint();
            }
        };

        worker.execute();
    }
}

// Método para cargar las tarjetas guardadas
private void cargartarjetasGuardadas(JPanel panelTarjetas) {
    panelTarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

    for (Tarjeta tarjeta : guardadas) {
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        panelTarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }

    panelTarjetas.revalidate();
    panelTarjetas.repaint();
}

// Método para cargar las tarjetas más recientes
private void cargarRecientes(JPanel panelTarjetas) {
    panelTarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas


    List<Tarjeta> recientes = avl.getTarjetasInDescendingOrder();


    for (Tarjeta tarjeta : recientes){
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        panelTarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }
}

private void cargarGuardadas(JPanel paneltarjetas){
    paneltarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

    for (Tarjeta tarjeta : guardadas) {
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        paneltarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }

    paneltarjetas.revalidate();
    paneltarjetas.repaint();
}

private void cargarMejorCalificadas(JPanel panelTarjetas) {
    panelTarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

    Lista<Tarjeta> mejorCalificadas = heap.getTarjetas();

    for (Tarjeta tarjeta : mejorCalificadas) {
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        panelTarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }

    panelTarjetas.revalidate();
    panelTarjetas.repaint();

}

private void cargarTodas(JPanel paneltarjetas) {
    paneltarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

    for (Tarjeta tarjeta : lista) {
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        paneltarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }

    paneltarjetas.revalidate();
    paneltarjetas.repaint();
}


// Método para cargar las tarjetas recomendadas
private List<Tarjeta> cargarRelacionesPorEtiqueta(Tarjeta actualTarjeta, Lista<Tarjeta> lista, ConjuntoDisyunto<Tarjeta> conjuntoDisyunto) {
    Grafo<Tarjeta> grafo = new Grafo<>();

    // Construimos el grafo solo con las tarjetas que tienen la etiqueta dada
    Iterator<Tarjeta> iterador = lista.iterator();
    while (iterador.hasNext()) {
        Tarjeta tarjeta = iterador.next();
        if (tarjeta.getTag().equalsIgnoreCase(actualTarjeta.getTag())) {
            // Agregar nodos y relaciones al grafo
            for (Tarjeta otraTarjeta : lista) {
                if (!tarjeta.equals(otraTarjeta) && otraTarjeta.getTag().equalsIgnoreCase(actualTarjeta.getTag())) {
                    grafo.agregarArista(tarjeta, otraTarjeta);
                }
            }
        }
    }

    List<Tarjeta> tarjetas = grafo.obtenerRelacionados(actualTarjeta);
    return tarjetas;

}



private void cargarRecomendadas(JPanel panelTarjetas, Tarjeta actualTarjeta) {
    panelTarjetas.removeAll(); // Limpiar el panel de tarjetas antes de cargar nuevas

    List<Tarjeta> recomendadas = cargarRelacionesPorEtiqueta(actualTarjeta, lista, conjuntoDisyunto);

    for (Tarjeta tarjeta : recomendadas) {
        JButton btnTarjeta = new JButton("<html>" + tarjeta.getTitle() + 
                                         "<br>Rating: " + tarjeta.getRating() + " estrellas</html>");
        btnTarjeta.setPreferredSize(new java.awt.Dimension(150, 150));
        btnTarjeta.setBackground(new java.awt.Color(0, 153, 153));
        btnTarjeta.setForeground(java.awt.Color.WHITE);

        // Acción para mostrar la tarjeta completa al presionarla
        btnTarjeta.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                mostrarTarjetaCompleta(tarjeta);
            }
        });

        panelTarjetas.add(btnTarjeta); // Agregar las tarjetas al panel
    }

    panelTarjetas.revalidate();
    panelTarjetas.repaint();

}

// Método para mostrar todas las tarjetas, sin orden ni filtro
private void mostrarTodas() {
    jPanel3.removeAll();
    jPanel3.setLayout(new BorderLayout());

    // Crear el panel que contendrá las tarjetas
    JPanel panelTarjetas = new JPanel();
    panelTarjetas.setLayout(new GridLayout(0, 3, 10, 10));

    // Crear un JScrollPane para hacer scroll en las tarjetas
    JScrollPane scrollPane = new JScrollPane(panelTarjetas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    jPanel3.add(scrollPane, BorderLayout.CENTER);

    // Cargar todas las tarjetas
    cargarTodas(panelTarjetas);

    jPanel3.revalidate();
    jPanel3.repaint();
}




 
    private void mostrarTarjetaCompleta(Tarjeta tarjeta) {
    jPanel3.removeAll(); // Limpiar el panel principal
    jPanel3.setLayout(new BoxLayout(jPanel3, BoxLayout.Y_AXIS)); // Layout vertical

    // Fuente para el título
    Font fuenteTitulo = new Font("Arial", Font.BOLD, 20);
    // Fuente para los datos
    Font fuenteContenido = new Font("Arial", Font.PLAIN, 16);

    JLabel lblTitulo = new JLabel("Título: " + tarjeta.getTitle());
    lblTitulo.setForeground(java.awt.Color.black);
    lblTitulo.setFont(fuenteTitulo);
    lblTitulo.setHorizontalAlignment(SwingConstants.LEFT);

    JLabel lblDatos = new JLabel("<html><b>Consejo:</b><br>" + tarjeta.getData() + "</html>");
    lblDatos.setForeground(java.awt.Color.black);
    lblDatos.setFont(fuenteContenido);
    lblDatos.setHorizontalAlignment(SwingConstants.LEFT);

    JLabel lblEtiqueta = new JLabel("<html><b>Etiqueta: </b>" + tarjeta.getTag()+ "</html>");
    lblEtiqueta.setForeground(java.awt.Color.black);
    lblEtiqueta.setFont(fuenteContenido);
    lblEtiqueta.setHorizontalAlignment(SwingConstants.LEFT);

    JLabel lblCalificacion = new JLabel("<html><b>Calificación promedio: </b>" + tarjeta.getRating() + " estrellas"+ "</html>");
    lblCalificacion.setForeground(java.awt.Color.black);
    lblCalificacion.setFont(fuenteContenido);
    lblCalificacion.setHorizontalAlignment(SwingConstants.LEFT);

    // Botón para volver a la vista de tarjetas
    JButton btnVolver = new JButton("Volver");
    btnVolver.setBackground(new java.awt.Color(0, 153, 153));
    btnVolver.setForeground(java.awt.Color.WHITE);
    btnVolver.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnVolver.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            buscarTarjetas(""); // Volver a la lista de tarjetas
        }
    
                
    });
    
    // Botón para editar la tarjeta
    JButton btnEditar = new JButton("Editar");
    btnEditar.setBackground(new java.awt.Color(0, 153, 153));
    btnEditar.setForeground(java.awt.Color.WHITE);
    btnEditar.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnEditar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            editarTarjeta(tarjeta); // Llama a una función para editar la tarjeta
        }
    });

    // Botón para calificar la tarjeta
    JButton btnCalificar = new JButton("Calificar");
    btnCalificar.setBackground(new java.awt.Color(0, 153, 153));
    btnCalificar.setForeground(java.awt.Color.WHITE);
    btnCalificar.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnCalificar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            float rating = Float.parseFloat(JOptionPane.showInputDialog("Ingrese la calificación (1-5 estrellas):"));
            if (rating >= 1 && rating <= 5) {
                tarjeta.addRating(rating);
                JOptionPane.showMessageDialog(null, "Calificación guardada correctamente.");
                guardarTarjetasEnArchivo();
                mostrarTarjetaCompleta(tarjeta);
            } else {
                JOptionPane.showMessageDialog(null, "La calificación debe estar entre 1 y 5 estrellas.");
            }
        }
    });

    // Botón para eliminar la tarjeta
    JButton btnEliminar = new JButton("Eliminar");
    btnEliminar.setBackground(new java.awt.Color(0, 153, 153));
    btnEliminar.setForeground(java.awt.Color.WHITE);
    btnEliminar.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnEliminar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            eliminarTarjeta(tarjeta); // Llama a una función para eliminar la tarjeta
        }
    });
    //Botón para guardar la tarjeta
    JButton btnGuardar = new JButton("Guardar");
    btnGuardar.setBackground(new java.awt.Color(0, 153, 153));
    btnGuardar.setForeground(java.awt.Color.WHITE);
    btnGuardar.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnGuardar.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            String titulo = tarjeta.getTitle();
            String contenido = tarjeta.getData();
            String etiqueta = tarjeta.getTag();
            float rating = tarjeta.getRating(); 

            Tarjeta nuevaTarjeta = new Tarjeta(contenido, titulo, etiqueta, rating);
            guardadas.add(nuevaTarjeta);

            // Guardar tarjetas en el archivo
            guardarTarjetasEnArchivo();

            javax.swing.JOptionPane.showMessageDialog(null, "Tarjeta guardada");
        }
    });

    JPanel panelRecomendadas = new JPanel();
    panelRecomendadas.setLayout(new BoxLayout(panelRecomendadas, BoxLayout.Y_AXIS));
    panelRecomendadas.setBackground(new java.awt.Color(0, 153, 153));
    

    JLabel lblRecomendadas = new JLabel("Tarjetas recomendadas");
    lblRecomendadas.setForeground(java.awt.Color.BLACK);
    lblRecomendadas.setFont(fuenteTitulo);
    lblRecomendadas.setAlignmentX(Component.CENTER_ALIGNMENT);

    panelRecomendadas.add(lblRecomendadas);

    JPanel panelTarjetasRecomendadas = new JPanel();
    panelTarjetasRecomendadas.setLayout(new GridLayout(0, 3, 10, 10));

    JScrollPane scrollPane = new JScrollPane(panelTarjetasRecomendadas);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    panelRecomendadas.add(scrollPane);

    cargarRecomendadas(panelTarjetasRecomendadas, tarjeta);


    JPanel panelPrincipal = new JPanel();
    panelPrincipal.setLayout(new BoxLayout(panelPrincipal, BoxLayout.Y_AXIS));
    panelPrincipal.setAlignmentX(Component.CENTER_ALIGNMENT);
    panelPrincipal.setBackground(new java.awt.Color(0, 153, 153));
    panelPrincipal.add(Box.createVerticalStrut(50));
    panelPrincipal.add(lblTitulo);
    panelPrincipal.add(lblDatos);
    panelPrincipal.add(lblEtiqueta);
    panelPrincipal.add(lblCalificacion);

    JPanel panelBotones = new JPanel();
    panelBotones.setLayout(new FlowLayout(FlowLayout.CENTER));
    panelBotones.setBackground(new java.awt.Color(0, 153, 153));
    panelBotones.add(btnEditar); // Botón para editar
    panelBotones.add(btnEliminar); // Botón para eliminar
    panelBotones.add(btnCalificar); // Botón para calificar
    panelBotones.add(btnGuardar); // Botón para guardar
    panelBotones.add(btnVolver); // Botón para volver


    jPanel3.add(panelPrincipal, BorderLayout.NORTH); // Tarjeta actual
    jPanel3.add(panelBotones, BorderLayout.CENTER); // Botones
    jPanel3.add(panelRecomendadas); // Tarjetas recomendadas
    jPanel3.add(panelRecomendadas); // Tarjetas recomendadas
    
    jPanel3.revalidate();
    jPanel3.repaint(); // Refrescar el panel para mostrar la tarjeta completa
}
    
    private void editarTarjeta(Tarjeta tarjeta) {
    // Mostrar campos para editar
    String nuevoTitulo = JOptionPane.showInputDialog("Ingrese el nuevo título:", tarjeta.getTitle());
    String nuevoConsejo = JOptionPane.showInputDialog("Ingrese el nuevo consejo:", tarjeta.getData());
    String nuevaEtiqueta = JOptionPane.showInputDialog("Ingrese la nueva etiqueta:", tarjeta.getTag());

    // Actualizar la tarjeta con los nuevos valores
    if (nuevoTitulo != null && nuevoConsejo != null && nuevaEtiqueta != null) {
        tarjeta.setTitle(nuevoTitulo);
        tarjeta.setData(nuevoConsejo);
        tarjeta.setTag(nuevaEtiqueta);

        JOptionPane.showMessageDialog(null, "Tarjeta actualizada correctamente.");
        guardarTarjetasEnArchivo();
        buscarTarjetas(""); // Volver a la lista de tarjetas
    }
}

private void eliminarTarjeta(Tarjeta tarjeta) {
    // Confirmación antes de eliminar
    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea eliminar esta tarjeta?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    
    if (confirmacion == JOptionPane.YES_OPTION) {
        lista.remove(tarjeta);
        heap.remove(tarjeta); 
        JOptionPane.showMessageDialog(null, "Tarjeta eliminada correctamente.");
        guardarTarjetasEnArchivo();
        buscarTarjetas(""); // Volver a la lista de tarjetas
    }
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MENU1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MENU1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MENU1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MENU1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MENU1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MENU;
    private javax.swing.JButton OPCION1;
    private javax.swing.JButton OPCION2;
    private javax.swing.JButton OPCION3;
    private javax.swing.JButton OPCION4;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
